// TODO: - decorators
//       - continuation line
//       - augassign 
//       - dotted names 
//       - boolean expr in factor
//       - class 
//       - io files  
//       - command line args 
//       - OpFactor: add '//'
//       - OpFactorSigned: add '~'
//       - Atom: add dictorsetmaker 
//       - Atom: add  '...'
//       - Atom: add yield expr 
//       - AtomExpr: allow multiple trailers 
//       - DecoratedStmt: add async_funcdef 
//       - FunctionHeaderStmt: add HeaderResults  
//       - MethodHeaderStmt: add HeaderResults  
//       -  
//       -  
//       -  

import openmp
import imports

Pyccel:
  (statements*=Statement)
;

Statement:
    SimpleStmt 
  | CompoundStmt
;

SimpleStmt:
  SmallStmt (';' SmallStmt)* (';')?
;

SmallStmt:
    AnnotatedStmt 
  | CommentStmt 
  | PassStmt 
  | FlowStmt 
  | DelStmt 
  | ImportStmt 
  | ConstructorStmt 
  | DeclarationStmt 
  | ExprStmt 
  | AssertStmt
;

FlowStmt:
    BreakStmt 
  | ContinueStmt 
  | ReturnStmt 
  | RaiseStmt 
  | YieldStmt
  | SyncStmt
;

CompoundStmt:
    IfStmt 
  | ForStmt 
  | DecoratedStmt
  | WhileStmt
  | ParallelBlockStmt
;

AnnotatedStmt:
    FunctionHeaderStmt 
  | ClassHeaderStmt
  | MethodHeaderStmt
  | OpenmpStmt
;

ExprStmt: 
    StencilStmt 
  | ExecStmt 
  | EvalStmt 
  | AssignStmt 
  | AugAssignStmt 
  | MultiAssignStmt
  | CallStmt 
;

SuiteStmt: 
//  SimpleStmt 
//  | 
  INDENT
  stmts+=Statement
  DEDENT
;

AssertStmt:
  ASSERT '(' test=Test ')'
;

//DecoratorStmt: 
//  '@' dotted_name ( '(' (arglist)? ')' )? NEWLINE
//;

DecoratedStmt: 
  FunctionDefStmt | ClassDefStmt
;

FunctionDefStmt: 
  DEF name=ID trailer=TrailerArgList ':'
  body=SuiteStmt
;

ClassDefStmt:
  CLASS name=ID '(' base=ID ')' ':'
  body=SuiteStmt
;

CallStmt: 
  name=ID trailer=TrailerArgList
;


PassStmt: label=PASS;
BreakStmt: label=BREAK;
ContinueStmt: label=CONTINUE;
RaiseStmt: label=RAISE;
YieldStmt: label=YIELD;

ReturnStmt: label=RETURN (variables*=Expression[',']);
DelStmt: DEL variables*=AtomExpr[','];
SyncStmt: SYNC (trailer=TrailerArgList)? (variables*=Expression[',']);

CommentStmt:
//  '#' text=/[^x].*$/  
  '#' text=/.*$/
;

ClassHeaderStmt: 
  '#$' 'header' 'class'  name=ID '(' options+=ClassOptions[','] ')'
;

MethodHeaderStmt: 
  '#$' 'header' 'method' name=ID '(' decs*=DeclareAtom[','] ')'
  (results=HeaderResults)?
;

FunctionHeaderStmt: 
  '#$' 'header' (kind=FunctionKind)? name=ID '(' decs*=DeclareAtom[','] ')'
  (results=HeaderResults)?
;

FunctionKind: 'function' | 'procedure';

ClassOptions: 'abstract' | 'private' | 'public';
DeclareAtom: (star='*')? dtype=ID (trailer=TrailerSubscriptList)?;
HeaderResults: 'results' '(' decs*=DeclareAtom[','] ')'; 

DeclarationStmt: datatype=DataType variables+=ID[','];

DataType:
    'double' 
  | 'float' 
  | 'int' 
  | 'complex'
;

ParameterTest: ID | STRING;
Variable: ID;

ConstructorStmt: lhs=ID '=' constructor=Constructor '(' ')' ;
Constructor: DataType ;

IdentifierOrNumber: Number | ID;

ArgList: '(' args+=Args[','] ')';
Args: ArgList | DictElement | IdentifierOrNumber;

PythonPrintStmt: name='print' '('   (args+=PrintStmt[',']) ')';
PrintStmt: STRING | Expression;

// TODO: remove
ParameterValue: (value=IdentifierOrNumber |value=ArgList);
ParameterSingle: label=ParameterTest '=' value=ParameterValue;

AssignRHS: Expression | ExpressionDict | ExpressionList;

AssignStmt: lhs=ID (trailer=Trailer)? '=' rhs=AssignRHS;
AugAssignStmt: lhs=ID (trailer=Trailer)? op=OpAug rhs=Expression;
MultiAssignStmt: lhs+=ID[','] '=' rhs=Expression;

StencilStmt: lhs=ID '=' 'stencil' '(' parameters+=ParameterSingle[','] ')' ;
ExecStmt: 
  lhs+=ID[','] '=' 'exec' '(' module=STRING ',' function=STRING ',' args=ArgList ')'
;

EvalStmt: lhs=ID '=' 'eval' '(' expression=STRING ')';

RangeStmt:
  'range' '(' start=Expression ',' end=Expression (',' step=Expression)? ')'
;

ParallelRangeStmt:
  'prange' '(' start=Expression ',' end=Expression (',' step=Expression)? ')'
;

IterableRange: RangeStmt | ParallelRangeStmt | ID;

ForStmt: 'for' iterable+=ID[','] 'in' range=IterableRange ':' 
               body=SuiteStmt
;

WhileStmt:
  WHILE test=OrTest ':'
  body=SuiteStmt
;

IfStmt: 
  IF test=Test ':' body_true=SuiteStmt
  (body_elif*=ElifStmt)? 
  (ELSE ':' body_false=SuiteStmt)? 
;

ElifStmt:
  (ELIF test=Test ':' body=SuiteStmt) 
;

ParallelBlockStmt:
  WITH PARALLEL '(' (num_threads=Number)? ')' ':'
  body=SuiteStmt
;


Test: op=OrTest (IF OrTest ELSE Test)?;
OrTest: op=AndTest (OR op=AndTest)*;
AndTest: op=Comparison (AND op=Comparison)*;
Comparison: op=Expression (op=OpComp op=Expression)*;

Expression: ArithmeticExpression;
ArithmeticExpression: op=Term (op=OpPlusOrMinus op=Term)*;
Term: op=Factor (op=OpFactor op=Factor)*;
Factor: Power | FactorSigned;
FactorSigned: (sign=OpFactorSigned)?  op=AtomExpr;
Power: op=AtomExpr '**' exponent=Factor;
AtomExpr: op=Atom (trailers*=Trailer)?;

Number: Float | INT;
Atom: 
   '(' op=Expression ')'
  | (op=Number) 
  | (op=ID) 
  | (op=STRING) 
  | (op=NONE)
  | (op=TRUE)
  | (op=FALSE)
  | '(' op=Test ')'
;

ExpressionList: '(' args+=Expression[',']   ')';
ExpressionDict: '{' args+=DictElement[',']   '}';

IDorSTRING: ID | STRING; 
ArgValued: (key=IDorSTRING '=')? value=Expression ;
DictElement: key=IDorSTRING ':' value=Atom;

OpPlusOrMinus: '+' | '-';
OpFactor: '*' | '@' | '/' | '%' ;
OpFactorSigned: '+' | '-';
OpAug: '+=' | '*=' | '-=' | '/=';
// <> isn't actually a valid comparison operator in Python. It's here for the
// sake of a __future__ import described in PEP 401 (which really works :-)
OpComp: 
    '>='
  | '<='
  | '<>'
  | '<'
  | '>'
  | '=='
  | '!='
  | 'in'
  | 'not' 'in'
  | 'is'
  | 'is' 'not'
;

Trailer: 
    (args=TrailerArgList)?
  | (args=TrailerSubscriptList)?
  | (args=TrailerDots)?
;

TrailerArgList: '(' args*=TrailerArg[','] ')';
TrailerSubscriptList: '[' args*=TrailerSubscript[','] ']';
TrailerDots: '.' args=ID;

TrailerArg: TrailerArgList | ArgValued;
TrailerSubscript: 
    TrailerSlice 
  | TrailerSliceLeft 
  | TrailerSliceRight 
  | TrailerSliceEmpty 
  | Expression
;

TrailerSliceLeft: (start=Expression ':');
TrailerSliceRight: (':' end=Expression);
TrailerSlice: (start=Expression ':' end=Expression);
TrailerSliceEmpty: (dots=':');

Float:
  /[-+]?[0-9]*\.[0-9]+([eE][-+]?[0-9]+)?\b/
;

BOOLEAN: TRUE | FALSE;

// indent/dedent are here since textX does not handle indentation yet
INDENT: 'indent';
DEDENT: 'dedent';

AND : 'and';
AS : 'as';
ASSERT : 'assert';
ASYNC : 'async';
AWAIT : 'await';
BREAK : 'break';
CLASS : 'class';
CONTINUE : 'continue';
DEL : 'del';
DEF : 'def';
ELIF : 'elif';
ELSE : 'else';
EXCEPT : 'except';
FALSE : 'False';
FINALLY : 'finally';
FOR : 'for';
FROM : 'from';
GLOBAL : 'global';
IF : 'if';
IN : 'in';
IS : 'is';
IMPORT : 'import';
LAMBDA : 'lambda';
NONE : 'None';
NONLOCAL : 'nonlocal';
NOT : 'not';
OR : 'or';
PASS : 'pass';
PARALLEL : 'parallel';
RETURN : 'return';
SYNC : 'sync';
RAISE : 'raise';
TRUE : 'True';
TRY : 'try';
WHILE : 'while';
WITH : 'with';
YIELD : 'yield';
