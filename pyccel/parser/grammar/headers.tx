Header:
  statements*=HeaderStmt
;

HeaderStmt: '#$' 'header' stmt=Statement;

Statement:
    FunctionMacroStmt 
  | VariableHeaderStmt
  | FunctionHeaderStmt 
  | ClassHeaderStmt
  | MetavarHeaderStmt
  | InterfaceStmt
;

TrailerSubscriptList: '[' args*=':' [','] ']';

DataType: ID|STAR;

Type: dtype=DataType (trailer=TrailerSubscriptList)?;
ListType : '[' dtype+=DataType[','] ']';
TypeHeader: Type|ListType ;
UnionTypeStmt:  dtype+=TypeHeader['|'] ;


VariableHeaderStmt: 'variable'  name=ID ('::')? dec=TypeHeader;

FunctionHeaderStmt: 
  (kind=FunctionKind)? (static=Static)? name=ID '(' decs*=UnionTypeStmt[','] ')' (results=HeaderResults)?
;

FunctionKind: 'function' | 'procedure' | 'method';
Static: 'static';
HeaderResults: 'results' '(' decs+=TypeHeader[','] ')'; 

ClassHeaderStmt: 'class'  name=ID '(' options+=ClassOptions[','] ')';

ClassOptions: 
    'abstract' 
  | 'private' 
  | 'public' 
  | 'iterable' 
  | 'with' 
  | 'hide' 
  | 'openmp'
  | 'openacc'
;

MetavarHeaderStmt: 'metavar'  name=ID '=' value=MetavarValues;
MetavarValues: BOOL|STRING;

InterfaceStmt: 'interface' name=ID '=' args+=ID['|'];

MacroArg: arg=ID (optional='?')?;
ListArgsStmt: args*=MacroArg[','];
ListResultsStmt: args*=ID[','];
ListAnnotatedArgsStmt: args*=IdOrMacroStmt[','];
IdOrMacroStmt: MacroStmt | INT | NUMBER | ID;
MacroStmt: arg=ID '.' macro=AvailableMacro ('[' parameter=MacroParameter ']')?;
MacroParameter: INT | ID;

//MacroChoiceStmt: value= IdOrMacroStmt '|' default=IdOrMacroStmt;

// TODO shall we add also results to the master call?
FunctionMacroStmt: 
  'macro' ('(' results=ListResultsStmt ')' ',')? 
  name=ID '(' args=ListArgsStmt ')' 
  ':=' 
  master_name=ID '(' master_args=ListAnnotatedArgsStmt ')'
;

STAR: '*';
OPTIONAL: '!';
AvailableMacro: 
    'shape'
  | 'dtype'
;

