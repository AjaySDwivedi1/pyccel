Pyccel:
  (statements*=Statement)
;

Statement:
  (SimpleStmt | CompoundStmt)
;

SimpleStmt:
  SmallStmt (';' SmallStmt)* (End)?
;

SmallStmt:
  (PassStmt | FlowStmt | DelStmt | DeclarationStmt | ExprStmt )
;

CompoundStmt:
  (IfStmt | ForStmt)
;

SuiteStmt: 
  SimpleStmt 
//  | 
//   NEWLINE INDENT stmt+ DEDENT
;

// not working
PassStmt:
  label='pass'
;

FlowStmt:
  (BreakStmt | ContinueStmt | ReturnStmt | RaiseStmt | YieldStmt)
;

BreakStmt:
  label='break'
;

ContinueStmt:
  label='continue'
;

ReturnStmt:
  label='return'
;

RaiseStmt:
  label='raise'
;

YieldStmt:
  label='yield'
;

DelStmt:
  'del' variables*=ID[',']
;


DeclarationStmt: 
  datatype=DataType variables+=ID[',']
;

DataType:
  ('double' | 'int')
;

Variable:
  ID
;

IdentifierOrNumber:
  (NUMBER | ID)
;

ForStmt: 
  'for' iterable=ID 'in' 
  'range' LPAREN start=IdentifierOrNumber COMMA 
                 end=IdentifierOrNumber RPAREN ':' 
  body+=SmallStmt[';']
  End
;

ExprStmt: 
  AssignStmt
;

AssignStmt: 
  lhs+=ID[','] '=' rhs=Expression 
;

IfStmt: 
  'if' Test ':' body_true+=SmallStmt[';']
//  ('elif' test=Test ':' SuiteStmt)* 
  ('else' ':' body_false+=SmallStmt[';'])?
  End
;

Test: 
  OrTest ('if' OrTest 'else' Test)? 
//  | lambdef
;

//test_nocond: or_test | lambdef_nocond;
//lambdef: 'lambda' (varargslist)? ':' test;
//lambdef_nocond: 'lambda' (varargslist)? ':' test_nocond;

OrTest: 
  AndTest ('or' AndTest)*
;

AndTest: 
  NotTest ('and' NotTest)*
;

NotTest: 
  'not' NotTest 
  | Comparison
;

Comparison: 
  Expression (CompOp Expression)*
;

// <> isn't actually a valid comparison operator in Python. It's here for the
// sake of a __future__ import described in PEP 401 (which really works :-)
CompOp: 
  '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
;

Expression: 
  op=Term (op=PlusOrMinus op=Term)* 
;

Term: 
  op=Factor (op=MulOrDiv op=Factor)*
;

Factor: 
  FactorBinary | FactorUnary | FactorSigned
;

FactorSigned: 
  (sign=PlusOrMinus)?  op=Operand
;

FactorUnary:
  name=UnaryOp LPAREN op=Operand RPAREN
;

FactorBinary:
  name=BinaryOp LPAREN op=Factor COMMA op=Factor RPAREN
;

// there is a problem with this rule, only on my laptop
// it seems it can't parse a word like phi, and only returns "p"
Operand: 
  (op=NUMBER) | (op=ID) | (LPAREN op=Expression RPAREN)
;

UnaryOp:
   ('grad'|'curl'|'div'|'dxx'|'dyy'|'dzz'|'dxy'|'dyz'|'dxz'|'dx'|'dy'|'dz')
;

BinaryOp:
   ('dot'|'inner'|'outer'|'cross')
;

EQ:
  "="
;

DEF:
  "::" | ":="
;

IN:
  "::"
;

COMMA:
  ","
;

SUBSCRIPT:
  '_'
;

LPAREN:
  "("
;

RPAREN:
  ")"
;

LTRIANGLE: 
  '<'
;

RTRIANGLE:
  '>'
;

PlusOrMinus: 
  '+' | '-'
;

MulOrDiv: 
  '*' | '/' 
;

Comment:
  /#.*$/
;

End:
  'end'
;
